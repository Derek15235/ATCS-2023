# Generated by ChatGPT and edited by Derek Jain
import pygame
import sys
import random
import math
from fsm import FSM

# Constants
WIDTH, HEIGHT = 600, 800
BALL_RADIUS = 8
RACQUET_WIDTH, RACQUET_HEIGHT = 100, 100
FPS = 60
WHITE = (255, 255, 255)
BLACK = (0, 0, 0)
YELLOW = (255, 255, 0)

class Ball:
    def __init__(self, x, y, radius, speed):
        self.x = x
        self.y = y
        self.radius = radius
        self.speed = speed
        self.added_speed = 0
        self.direction = [random.choice([.1, -.1, .2, -.2, .3, -.3, .4, -.4, -.5, .5]), random.choice([.1, -.1, .2, -.2, .3, -.3, .4, -.4, -.5, .5])]

    def move(self):
        self.x += (self.speed + self.added_speed) * self.direction[0]
        self.y += (self.speed + self.added_speed) * self.direction[1]
    
    def move_towards(self, target_x, target_y):
        angle = math.atan2(target_y - self.y, target_x - self.x)
        self.direction = [math.cos(angle), math.sin(angle)]


class Racquet:
    def __init__(self, x, y, width, height, speed, power):
        self.x = x
        self.y = y
        self.width = width
        self.height = height
        self.speed = speed
        self.power = power

    def move_left(self):
        self.x -= self.speed

    def move_right(self):
        self.x += self.speed

    def move_up(self):
        self.y -= self.speed

    def move_down(self):
        self.y += self.speed

class YellowBox:
    def __init__(self, x, y, width, height, duration):
        self.x = x
        self.y = y
        self.width = width
        self.height = height
        self.duration = duration
        self.timer = 0

    def draw(self, screen):
        pygame.draw.rect(screen, YELLOW, (self.x, self.y, self.width, self.height))

    def update(self):
        self.timer += 1
        return self.timer >= self.duration
    
class AI:
    def __init__(self, racquet, ball, box, error, out_func):
        self.racquet = racquet
        self.ball = ball
        self.box = box
        self.error = error
        self.out_func = out_func

        self.fsm = FSM("middle moving")
        self.init_fsm()
    
    def init_fsm(self):
        # Ball moving towards ai
        self.fsm.add_transition("towards", "to ball", self.move_towards_ball)
        self.fsm.add_transition("towards", "middle moving", self.move_towards_ball, "to ball")

        # Ball moving away from ai
        self.fsm.add_transition("away", "hit ball", self.move_towards_middle, "middle moving")
        self.fsm.add_transition("away", "middle moving", self.move_towards_middle)

        self.fsm.add_transition("serving", "middle moving", self.move_towards_middle)


        # ai hits ball, then starts go back to middle
        self.fsm.add_transition("ai hit", "to ball", self.random_hit, "middle moving")
        self.fsm.add_transition("player hit", "middle moving", self.move_towards_middle)


        

    # Basic function for moving the AI
    def move(self):
        self.racquet.x += self.racquet.speed * self.direction[0]
        self.racquet.y += self.racquet.speed * self.direction[1]
        

    def move_towards_ball(self):
        angle = math.atan2(self.ball.y - self.racquet.y, self.ball.x - self.racquet.x)
        self.direction = [math.cos(angle), math.sin(angle)]
        # Move the AI near the ball once the ball is hit, make sure the AI can't cross the the line
        if self.racquet.y < HEIGHT // 2 - self.racquet.height and self.ball.y < (HEIGHT // 2 - self.ball.radius) + 100:
            self.move()
        elif self.ball.y < HEIGHT // 2 - self.ball.radius:
            self.racquet.y -= self.racquet.speed * abs(self.direction[1])
    def move_towards_middle(self):
        target_x = WIDTH // 2  - (.5 * self.racquet.width)
        target_y = 100 + (-.5 * self.racquet.height)
        if (self.racquet.x <= target_x + 5 and self.racquet.x >= target_x - 5) and (self.racquet.y <= target_y + 5 and self.racquet.y >= target_y - 5):
            self.racquet.x = target_x
            self.racquet.y = target_y
            self.direction = [0,0]
        else:  
             # Move towards the top middle of the screen
            angle = math.atan2(target_y - self.racquet.y, target_x - self.racquet.x)
            self.direction = [math.cos(angle), math.sin(angle)]
            self.move()
    
    def random_hit(self):
        click_x = random.uniform(self.box.left - self.error, self.box.right + self.error)
        click_y = random.uniform(self.box.top - self.error, self.box.bottom + self.error)
        self.out_func(click_x, click_y)

    def update(self, ball_state):
        self.fsm.process(ball_state)



class Game:
    def __init__(self, width, height, player_speed, ai_speed, player_power, ai_power, ai_margin):
        pygame.init()
        self.WIDTH = width
        self.HEIGHT = height
        self.court_width = width - 200
        self.court_height = height - 200
        self.screen = pygame.display.set_mode((width, height))
        pygame.display.set_caption("Vertical Tennis Game")

        # Load player images and scale them down
        self.ai_image = pygame.image.load("AI.png")
        self.ai_image = pygame.transform.flip(self.ai_image, False, True)
        self.ai_image = pygame.transform.scale(self.ai_image, (int(RACQUET_WIDTH * 7 / 8), int(RACQUET_HEIGHT * 7 / 8)))

        self.player_image = pygame.image.load("player.png")
        self.player_image = pygame.transform.scale(self.player_image, (int(RACQUET_WIDTH * 7 / 8), int(RACQUET_HEIGHT * 7 / 8)))

        # Load background image (scaled down)
        background_original = pygame.image.load("tennis_court.png")
        background_original = pygame.transform.scale(background_original, (self.court_width, self.court_height))
        self.background = pygame.Surface((WIDTH, HEIGHT))
        self.background.blit(background_original, (100, 100))

        self.clock = pygame.time.Clock()
        self.yellow_box = None
        self.collide = False
        self.current = None
        self.ball_state = "serving"
        self.player_hit_timer = 0

        # Define designated placement boxes for each player
        self.ai_box = pygame.Rect(self.WIDTH// 4, self.HEIGHT// 2 , self.WIDTH// 2, self.court_height // 2)
        self.player_box = pygame.Rect(self.WIDTH // 4, 100, self.WIDTH // 2, self.court_height // 2)

        self.ball = Ball(width // 2, height // 2, BALL_RADIUS, 5)
        self.racquet_ai = Racquet(width // 2 - RACQUET_WIDTH // 2, 100 - RACQUET_HEIGHT * .5, RACQUET_WIDTH, RACQUET_HEIGHT, ai_speed, ai_power)
        self.ai_controller = AI(self.racquet_ai, self.ball, self.ai_box, ai_margin, self.out)

        self.racquet_player = Racquet(width // 2 - RACQUET_WIDTH // 2, height - RACQUET_HEIGHT * .5 - 100, RACQUET_WIDTH, RACQUET_HEIGHT, player_speed, player_power)

        # Scores for the game and set
        self.set = [0, 0]
        self.current_game_scores = [0, 0]

        # Delay variables
        self.delaying = True
        self.delay_timer = 0


        # Fonts
        self.font = pygame.font.Font(None, 36)
        # Add a font for displaying "OUT" message
        self.out_font = pygame.font.Font(None, 72)

         # Define designated boxes for each player
        self.ai_box = pygame.Rect(self.WIDTH// 4, self.HEIGHT// 2 , self.WIDTH// 2, self.court_height // 2)
        self.player_box = pygame.Rect(self.WIDTH // 4, 100, self.WIDTH // 2, self.court_height // 2)

    def out(self, x, y):
        if (self.current == "ai" and self.ai_box.collidepoint(x, y)) or (self.current == "player" and self.player_box.collidepoint(x, y)):
            self.yellow_box = YellowBox(x, y, 20, 20, 20)
            # Update ball speed based on the racquet power
            if self.current == "ai":
                self.ball.added_speed = self.racquet_ai.power
            else:
                self.ball.added_speed = self.racquet_player.power
        else:
            # Some altered/added code: yellow box is drawn, displaying its out
            self.yellow_box = YellowBox(x, y, 20, 20, 120)
            self.yellow_box.draw(self.screen)
            out_text = self.out_font.render("OUT", True, WHITE)
            self.screen.blit(out_text, (self.WIDTH // 2 - out_text.get_width() // 2, self.HEIGHT // 2 - out_text.get_height() // 2))
            pygame.display.flip()
            pygame.time.delay(1000)
            self.yellow_box = None
            if self.current == "ai":
                self.current_game_scores[1] += 1
            else:
                self.current_game_scores[0] += 1
            self.check_game_winner()
            self.reset_positions()

    def handle_events(self):
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                sys.exit()
            elif event.type == pygame.MOUSEBUTTONDOWN and self.yellow_box is None and self.collide and self.current == "player":
                # Create a yellow box at the mouse click position
                mouse_x, mouse_y = pygame.mouse.get_pos()
                self.out(mouse_x, mouse_y)
                self.player_hit_timer = 0
                

    def update(self):
        keys = pygame.key.get_pressed()

        if not self.delaying:
            if keys[pygame.K_a] and self.racquet_player.x > 0: 
                self.racquet_player.move_left()
            if keys[pygame.K_d] and self.racquet_player.x < self.WIDTH - self.racquet_player.width:
                self.racquet_player.move_right()
            if keys[pygame.K_w] and self.racquet_player.y > self.HEIGHT // 2:
                self.racquet_player.move_up()
            if keys[pygame.K_s] and self.racquet_player.y < self.HEIGHT - self.racquet_player.height:
                self.racquet_player.move_down()

        # delay before each point
        if self.delaying:
            self.delay_timer += 1
            if self.delay_timer >= FPS * 2:  # 2 seconds delay
                self.delaying = False
                self.delay_timer = 0
                # Start moving the ball after the delay
                self.ball.direction = [random.choice([.1, -.1, .2, -.2, .3, -.3, .4, -.4, -.5, .5]), random.choice([.1, -.1, .2, -.2, .3, -.3, .4, -.4, -.5, .5])]
        else:
            if self.ball_state == "player hit":
                self.player_hit_timer += 1
                if self.player_hit_timer >= FPS - 30:  # .5 seconds
                    self.current_game_scores[0] += 1
                    self.check_game_winner()
                    self.reset_positions()

            # The hit box has been made, so ball should move towards it
            if self.yellow_box and self.collide:
        
                # Move the ball towards the center of the yellow box
                self.ball.move_towards(self.yellow_box.x + self.yellow_box.width / 2,
                                        self.yellow_box.y + self.yellow_box.height / 2)

                self.collide = False

            # Update and check if the yellow box duration has expired
            if self.yellow_box and self.yellow_box.update():
                self.yellow_box = None

            self.ball.move()

            # Update the balls state
            if self.ball.direction[1] < 0:
                self.ball_state = "towards"
            elif self.ball.direction[1] > 0:
                self.ball_state = "away"
            
            # Move the racquet_ai based on AI logic
            self.ai_controller.update(self.ball_state) 

            # Ball collisions with paddles
            if (
                not self.yellow_box
                and self.racquet_ai.x < self.ball.x < self.racquet_ai.x + self.racquet_ai.width
                and self.racquet_ai.y < self.ball.y < self.racquet_ai.y + self.racquet_ai.height
            ):
                # If the ball hits ai, change ball state to 
                self.ball.direction = [0, 0]
                self.ball_state = "ai hit"
                self.collide = True
                self.current = "ai"
            elif (
                not self.yellow_box
                and self.racquet_player.x < self.ball.x < self.racquet_player.x + self.racquet_player.width
                and self.racquet_player.y < self.ball.y < self.racquet_player.y + self.racquet_player.height
            ):
                # If the ball hits player, stop the ball and wait for a click
                self.ball.direction = [0, 0]
                self.ball_state = "player hit"
                self.collide = True
                self.current = "player"

            # Ball out of bounds
            if self.ball.y <= 0:
                self.current_game_scores[1] += 1
                self.check_game_winner()
                self.reset_positions()
            elif self.ball.y >= self.HEIGHT - self.ball.radius:
                self.current_game_scores[0] += 1
                self.check_game_winner()
                self.reset_positions()
            elif (self.ball.x <= 0 or self.ball.x >= self.WIDTH - self.ball.radius) and self.ball.y <= self.HEIGHT // 2 - self.ball.radius:
                self.current_game_scores[1] += 1
                self.check_game_winner()
                self.reset_positions()
            elif (self.ball.x <= 0 or self.ball.x >= self.WIDTH - self.ball.radius) and self.ball.y >= HEIGHT // 2 - self.ball.radius:
                self.current_game_scores[0] += 1
                self.check_game_winner()
                self.reset_positions()

    def check_game_winner(self):
        # Check if a game in the set is won
        if max(self.current_game_scores) >= 4:
            # Update the total game scores and reset the current game scores
            if self.current_game_scores[0] > self.current_game_scores[1]:
                self.set[0] += 1
                self.current_game_scores[0] = 0
                self.current_game_scores[1] = 0
            else:
                self.set[1] += 1
                self.current_game_scores[0] = 0
                self.current_game_scores[1] = 0

            if max(self.set) >= 1:
                 # Fill the screen with a background color
                self.screen.fill(BLACK)

                # Display the winner and quit the application
                if self.set.index(max(self.set)) == 0:
                    winner_text = f"The AI is the winner!"
                else:
                    winner_text = f"You are the winner!"

                winner_font = pygame.font.Font(None, 72)
                winner_surface = winner_font.render(winner_text, True, WHITE)
                self.screen.blit(winner_surface, (self.WIDTH // 2 - winner_surface.get_width() // 2, self.HEIGHT // 2 - winner_surface.get_height() // 2))
                pygame.display.flip()
                pygame.time.delay(3000)  # Display the winner for 3 seconds
                pygame.quit()
                new_game = Game(self.WIDTH, self.HEIGHT, player_speed=self.racquet_player.speed, ai_speed=self.racquet_ai.speed*2, player_power=self.racquet_player.power, ai_power=self.racquet_ai.power+3, ai_margin=self.ai_controller.error - 10)
                new_game.run()

            self.reset_positions()

            

    def reset_positions(self):
        self.racquet_ai.x = self.WIDTH // 2 - RACQUET_WIDTH // 2
        self.racquet_ai.y = 100 - RACQUET_HEIGHT * .5
        self.racquet_player.x = self.WIDTH // 2 - RACQUET_WIDTH // 2
        self.racquet_player.y = self.HEIGHT - RACQUET_HEIGHT * .5 - 100
        self.ball.x = self.WIDTH // 2
        self.ball.y = self.HEIGHT // 2
        self.ball.direction = [0, 0]  # Stop the ball initially
        self.current = None
        self.ball_state = "serving"
        self.ai_controller.fsm.current_state = "middle moving"
        self.ball.added_speed = 0
        self.player_hit_timer = 0  # Reset the player hit timer when resetting positions

        # Set a delay for 2 seconds
        self.delaying = True
        self.delay_timer = 0

    def draw(self):
        # Draw background
        self.screen.blit(self.background, (0, 0))

        # Draw red borders around the screen
        pygame.draw.rect(self.screen, (255, 0, 0), (0, 0, self.WIDTH, 5))                   # Top border
        pygame.draw.rect(self.screen, (255, 0, 0), (0, self.HEIGHT - 5, self.WIDTH, 5))  # Bottom border
        pygame.draw.rect(self.screen, (255, 0, 0), (0, 0, 5, self.HEIGHT))                # Left border
        pygame.draw.rect(self.screen, (255, 0, 0), (self.WIDTH - 5, 0, 5, self.HEIGHT))  # Right border

        # Draw player images and ball
        self.screen.blit(self.ai_image, (self.racquet_ai.x, self.racquet_ai.y))
        self.screen.blit(self.player_image, (self.racquet_player.x, self.racquet_player.y))
        pygame.draw.circle(self.screen, WHITE, (int(self.ball.x), int(self.ball.y)), self.ball.radius)

        # Draw the game and set scores
        total_score_text = self.font.render(f"{self.set[0]} - {self.set[1]}", True, WHITE)
        self.screen.blit(total_score_text, (self.WIDTH // 2 - total_score_text.get_width() // 2, 20))

        # Draw the current game scores
        tennis_scores = {0: "0", 1: "15", 2: "30", 3: "40"}
        player1_tennis_score = tennis_scores[self.current_game_scores[0]]
        player2_tennis_score = tennis_scores[self.current_game_scores[1]]


        game_score_text = self.font.render(f"{player1_tennis_score} - {player2_tennis_score}", True, WHITE)
        self.screen.blit(game_score_text, (self.WIDTH // 2 - game_score_text.get_width() // 2, 50))


        # Draw the yellow box if it exists
        if self.yellow_box:
            self.yellow_box.draw(self.screen)

        # Update the display
        pygame.display.flip()

    def run(self):
        while True:
            self.handle_events()
            self.update()
            self.draw()
            self.clock.tick(FPS)

if __name__ == "__main__":
    game = Game(WIDTH, HEIGHT, player_speed=5, ai_speed=5, player_power=4, ai_power=.5, ai_margin=50)
    game.run()

